type token =
  | INT of (int)
  | FLOAT of (float)
  | BOOL of (bool)
  | ID of (string)
  | STRING of (string)
  | LINHA of (int * int * token list)
  | INDENTA
  | DEDENTA
  | NOVALINHA
  | TIPOINT
  | TIPOFLOAT
  | TIPOSTRING
  | TIPOVOID
  | TIPOBOOL
  | PTO
  | PTVIRG
  | DEF
  | IS
  | YIELD
  | FROM
  | RETURN
  | TRUE
  | FALSE
  | APAR
  | FPAR
  | ACOL
  | FCOL
  | ACHA
  | FCHA
  | SETA
  | IF
  | ELSE
  | WHILE
  | DPONTOS
  | FOR
  | IN
  | RANGE
  | VIRG
  | NOT
  | AND
  | OR
  | ATRIB
  | MAIS
  | MENOS
  | VEZES
  | DIVIDIDO
  | MODULO
  | POT
  | MAIOR
  | MENOR
  | IGUAL
  | DIFERENTE
  | MAIORIGUAL
  | MENORIGUAL
  | ATRIBMAIS
  | ATRIBMENOS
  | ATRIBVEZES
  | ATRIBDIV
  | ATRIBMOD
  | EOF
  | PRINT
  | INPUT
  | INT_PARSE

open Parsing;;
let _ = parse_error;;
# 2 "sintatico.mly"
    open Asa;;
(* Cria uma expressao onde v eh o valor da expressÃ£o e o eh a ordem na
regra gramatical *)

let cria_exp o v =
    { valor = v;
       tipo = None;
       pos = Posicao.pos(o) }

(* Cria um comando onde c eh o comando e o eh a ordem na regra gramatical *)
let cria_cmd o c =
    { vcmd = c;
       pcmd = Posicao.pos(o) }
(* Cria um programa onde f sao as funcoes e c os comandos fora das funcoes
*)
let cria_programa f c =
    { funcsP = f;
       cmdsP = c }
(* Cria uma funcao onde o eh a ordem na regra gramatical, i eh o nome da funcao,
p sao os parametros e c sao os comandos dentro da funcao. O tipo de retorno inicia como None *)
let cria_funcao o i p t c =
    { idF = i;
       paramsF = p;
       cmdsF = c;
       returnF = t;
       posF = Posicao.pos(o);
       varLocaisF = Hashtbl.create 20 }
(* Cria um parametro onde o eh a ordem na regra gramatical e i o nome (id) do parametro.
O tipo do parametro inicia como TGen *)
let cria_parametro o i c = (i, cria_ent_var c)


# 102 "sintatico.ml"
let yytransl_const = [|
  263 (* INDENTA *);
  264 (* DEDENTA *);
  265 (* NOVALINHA *);
  266 (* TIPOINT *);
  267 (* TIPOFLOAT *);
  268 (* TIPOSTRING *);
  269 (* TIPOVOID *);
  270 (* TIPOBOOL *);
  271 (* PTO *);
  272 (* PTVIRG *);
  273 (* DEF *);
  274 (* IS *);
  275 (* YIELD *);
  276 (* FROM *);
  277 (* RETURN *);
  278 (* TRUE *);
  279 (* FALSE *);
  280 (* APAR *);
  281 (* FPAR *);
  282 (* ACOL *);
  283 (* FCOL *);
  284 (* ACHA *);
  285 (* FCHA *);
  286 (* SETA *);
  287 (* IF *);
  288 (* ELSE *);
  289 (* WHILE *);
  290 (* DPONTOS *);
  291 (* FOR *);
  292 (* IN *);
  293 (* RANGE *);
  294 (* VIRG *);
  295 (* NOT *);
  296 (* AND *);
  297 (* OR *);
  298 (* ATRIB *);
  299 (* MAIS *);
  300 (* MENOS *);
  301 (* VEZES *);
  302 (* DIVIDIDO *);
  303 (* MODULO *);
  304 (* POT *);
  305 (* MAIOR *);
  306 (* MENOR *);
  307 (* IGUAL *);
  308 (* DIFERENTE *);
  309 (* MAIORIGUAL *);
  310 (* MENORIGUAL *);
  311 (* ATRIBMAIS *);
  312 (* ATRIBMENOS *);
  313 (* ATRIBVEZES *);
  314 (* ATRIBDIV *);
  315 (* ATRIBMOD *);
    0 (* EOF *);
  316 (* PRINT *);
  317 (* INPUT *);
  318 (* INT_PARSE *);
    0|]

let yytransl_block = [|
  257 (* INT *);
  258 (* FLOAT *);
  259 (* BOOL *);
  260 (* ID *);
  261 (* STRING *);
  262 (* LINHA *);
    0|]

let yylhs = "\255\255\
\001\000\002\000\002\000\004\000\006\000\005\000\005\000\007\000\
\007\000\008\000\008\000\009\000\009\000\011\000\011\000\012\000\
\012\000\012\000\012\000\012\000\012\000\012\000\012\000\012\000\
\012\000\012\000\012\000\012\000\012\000\012\000\012\000\012\000\
\012\000\003\000\003\000\029\000\027\000\028\000\026\000\013\000\
\015\000\014\000\016\000\017\000\018\000\019\000\020\000\021\000\
\022\000\023\000\024\000\025\000\010\000\010\000\010\000\030\000\
\030\000\030\000\030\000\030\000\030\000\030\000\030\000\031\000\
\031\000\031\000\032\000\032\000\032\000\033\000\033\000\034\000\
\034\000\034\000\035\000\035\000\035\000\035\000\036\000\000\000"

let yylen = "\002\000\
\002\000\000\000\002\000\012\000\001\000\000\000\002\000\004\000\
\003\000\000\000\002\000\002\000\001\000\005\000\007\000\001\000\
\001\000\001\000\001\000\001\000\001\000\001\000\001\000\001\000\
\001\000\001\000\001\000\001\000\001\000\001\000\001\000\001\000\
\001\000\000\000\002\000\007\000\005\000\007\000\003\000\004\000\
\007\000\013\000\007\000\009\000\004\000\006\000\008\000\003\000\
\003\000\003\000\003\000\003\000\003\000\003\000\001\000\003\000\
\003\000\003\000\003\000\003\000\003\000\003\000\001\000\003\000\
\003\000\001\000\003\000\003\000\001\000\002\000\001\000\001\000\
\001\000\003\000\001\000\001\000\001\000\001\000\001\000\002\000"

let yydefred = "\000\000\
\002\000\000\000\080\000\000\000\000\000\000\000\003\000\000\000\
\075\000\076\000\078\000\000\000\077\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\029\000\035\000\
\016\000\017\000\018\000\019\000\020\000\021\000\022\000\023\000\
\024\000\025\000\026\000\027\000\028\000\030\000\031\000\032\000\
\033\000\000\000\000\000\000\000\069\000\071\000\072\000\073\000\
\006\000\010\000\079\000\000\000\000\000\000\000\000\000\000\000\
\000\000\070\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\039\000\074\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\067\000\068\000\000\000\000\000\007\000\
\000\000\011\000\000\000\000\000\000\000\000\000\045\000\000\000\
\000\000\010\000\000\000\000\000\040\000\000\000\000\000\014\000\
\012\000\034\000\034\000\000\000\000\000\037\000\000\000\000\000\
\000\000\005\000\000\000\000\000\000\000\000\000\000\000\046\000\
\000\000\000\000\000\000\000\000\008\000\000\000\000\000\043\000\
\034\000\000\000\015\000\038\000\036\000\000\000\000\000\000\000\
\047\000\034\000\000\000\044\000\000\000\000\000\004\000\034\000\
\000\000\042\000"

let yydgoto = "\002\000\
\003\000\004\000\006\000\007\000\079\000\139\000\112\000\080\000\
\114\000\022\000\023\000\024\000\025\000\026\000\027\000\028\000\
\029\000\030\000\031\000\032\000\033\000\034\000\035\000\036\000\
\037\000\038\000\039\000\040\000\041\000\042\000\043\000\044\000\
\045\000\046\000\047\000\048\000"

let yysindex = "\014\000\
\000\000\000\000\000\000\000\255\021\255\195\255\000\000\007\255\
\000\000\000\000\000\000\035\255\000\000\017\255\017\255\017\255\
\017\255\017\255\049\255\017\255\074\255\180\255\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\085\255\046\255\245\254\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\255\254\042\255\065\255\068\255\105\255\
\099\255\000\000\017\255\017\255\017\255\009\255\017\255\017\255\
\017\255\017\255\017\255\017\255\017\255\017\255\017\255\017\255\
\017\255\017\255\017\255\017\255\017\255\017\255\003\255\245\255\
\000\000\000\000\057\255\094\255\195\255\247\254\052\255\085\255\
\085\255\086\255\091\255\093\255\023\255\089\255\089\255\089\255\
\089\255\089\255\046\255\046\255\046\255\046\255\046\255\046\255\
\046\255\245\254\245\254\000\000\000\000\079\255\103\255\000\000\
\110\255\000\000\242\254\133\255\135\255\119\255\000\000\156\255\
\150\255\000\000\017\255\017\255\000\000\107\255\107\255\000\000\
\000\000\000\000\000\000\152\255\254\254\000\000\027\003\054\255\
\056\255\000\000\129\255\136\255\041\255\083\255\170\255\000\000\
\184\255\178\255\179\255\181\255\000\000\182\255\157\255\000\000\
\000\000\168\255\000\000\000\000\000\000\187\255\167\255\123\255\
\000\000\000\000\194\255\000\000\147\255\198\255\000\000\000\000\
\171\255\000\000"

let yyrindex = "\000\000\
\000\000\000\000\000\000\034\004\000\000\209\000\000\000\000\000\
\000\000\000\000\000\000\046\004\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\150\002\181\000\001\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\192\002\
\236\002\041\003\000\000\000\000\000\000\040\003\100\003\160\003\
\202\003\242\003\241\000\046\001\106\001\166\001\226\001\030\002\
\090\002\061\000\121\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\146\003\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\005\255\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\010\004\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000"

let yygindex = "\000\000\
\000\000\000\000\163\255\000\000\000\000\084\000\000\000\091\000\
\000\000\244\255\000\000\127\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\103\000\203\000\090\000\
\236\255\000\000\000\000\000\000"

let yytablesize = 1385
let yytable = "\058\000\
\066\000\052\000\053\000\054\000\055\000\056\000\110\000\081\000\
\009\000\009\000\010\000\011\000\090\000\013\000\001\000\119\000\
\005\000\009\000\010\000\011\000\051\000\013\000\144\000\129\000\
\008\000\060\000\061\000\111\000\120\000\009\000\049\000\125\000\
\015\000\077\000\078\000\145\000\141\000\142\000\060\000\061\000\
\015\000\009\000\010\000\011\000\012\000\013\000\087\000\020\000\
\151\000\093\000\094\000\095\000\096\000\097\000\098\000\020\000\
\108\000\109\000\050\000\160\000\064\000\014\000\060\000\061\000\
\015\000\116\000\082\000\115\000\165\000\091\000\092\000\016\000\
\057\000\017\000\169\000\018\000\121\000\019\000\147\000\020\000\
\148\000\060\000\061\000\009\000\010\000\011\000\012\000\013\000\
\075\000\076\000\152\000\060\000\061\000\060\000\061\000\060\000\
\061\000\059\000\083\000\086\000\021\000\084\000\117\000\014\000\
\060\000\061\000\015\000\060\000\061\000\122\000\136\000\137\000\
\126\000\016\000\123\000\017\000\124\000\018\000\128\000\019\000\
\065\000\020\000\115\000\009\000\010\000\011\000\012\000\013\000\
\060\000\061\000\164\000\068\000\127\000\069\000\070\000\071\000\
\072\000\073\000\074\000\130\000\085\000\131\000\021\000\014\000\
\060\000\061\000\015\000\009\000\010\000\011\000\012\000\013\000\
\132\000\016\000\167\000\017\000\133\000\018\000\134\000\019\000\
\143\000\020\000\088\000\089\000\106\000\107\000\149\000\014\000\
\138\000\150\000\015\000\009\000\010\000\011\000\012\000\013\000\
\153\000\016\000\170\000\017\000\063\000\018\000\021\000\019\000\
\154\000\020\000\155\000\156\000\159\000\157\000\158\000\014\000\
\161\000\162\000\015\000\009\000\010\000\011\000\012\000\013\000\
\163\000\016\000\166\000\017\000\168\000\018\000\021\000\019\000\
\001\000\020\000\140\000\118\000\135\000\000\000\000\000\014\000\
\000\000\000\000\015\000\060\000\061\000\062\000\000\000\000\000\
\000\000\016\000\000\000\017\000\000\000\018\000\021\000\019\000\
\000\000\020\000\063\000\064\000\065\000\066\000\067\000\000\000\
\062\000\000\000\000\000\000\000\000\000\009\000\010\000\011\000\
\051\000\013\000\000\000\000\000\000\000\000\000\021\000\000\000\
\000\000\066\000\066\000\066\000\066\000\066\000\000\000\000\000\
\066\000\066\000\000\000\000\000\015\000\113\000\099\000\100\000\
\101\000\102\000\103\000\104\000\105\000\066\000\000\000\000\000\
\066\000\066\000\000\000\020\000\000\000\000\000\000\000\066\000\
\000\000\066\000\066\000\066\000\066\000\066\000\066\000\066\000\
\066\000\066\000\066\000\066\000\066\000\056\000\000\000\066\000\
\000\000\066\000\066\000\066\000\066\000\066\000\066\000\066\000\
\066\000\066\000\066\000\066\000\066\000\064\000\064\000\064\000\
\064\000\064\000\000\000\000\000\064\000\064\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\064\000\000\000\000\000\064\000\064\000\000\000\000\000\
\000\000\000\000\000\000\064\000\000\000\064\000\064\000\064\000\
\064\000\064\000\064\000\064\000\064\000\064\000\064\000\064\000\
\064\000\057\000\000\000\064\000\000\000\064\000\064\000\064\000\
\064\000\064\000\064\000\064\000\064\000\064\000\064\000\064\000\
\064\000\065\000\065\000\065\000\065\000\065\000\000\000\000\000\
\065\000\065\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\065\000\000\000\000\000\
\065\000\065\000\000\000\000\000\000\000\000\000\000\000\065\000\
\000\000\065\000\065\000\065\000\065\000\065\000\065\000\065\000\
\065\000\065\000\065\000\065\000\065\000\058\000\000\000\065\000\
\000\000\065\000\065\000\065\000\065\000\065\000\065\000\065\000\
\065\000\065\000\065\000\065\000\065\000\063\000\063\000\063\000\
\063\000\063\000\000\000\000\000\063\000\063\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\063\000\000\000\000\000\063\000\063\000\000\000\000\000\
\000\000\000\000\000\000\063\000\000\000\063\000\063\000\063\000\
\063\000\063\000\063\000\063\000\063\000\063\000\063\000\000\000\
\000\000\059\000\000\000\063\000\000\000\063\000\063\000\063\000\
\063\000\063\000\063\000\063\000\063\000\063\000\063\000\063\000\
\063\000\062\000\062\000\062\000\062\000\062\000\000\000\000\000\
\062\000\062\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\062\000\000\000\000\000\
\062\000\062\000\000\000\000\000\000\000\000\000\000\000\062\000\
\000\000\062\000\062\000\062\000\062\000\062\000\062\000\062\000\
\062\000\062\000\062\000\000\000\000\000\060\000\000\000\062\000\
\000\000\062\000\062\000\062\000\062\000\062\000\062\000\062\000\
\062\000\062\000\062\000\062\000\062\000\000\000\056\000\056\000\
\056\000\056\000\056\000\000\000\000\000\056\000\056\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\056\000\000\000\000\000\056\000\056\000\000\000\
\000\000\000\000\000\000\000\000\056\000\000\000\056\000\056\000\
\056\000\056\000\056\000\056\000\056\000\056\000\056\000\056\000\
\000\000\061\000\000\000\000\000\056\000\000\000\056\000\056\000\
\056\000\056\000\056\000\056\000\056\000\056\000\056\000\056\000\
\056\000\056\000\057\000\057\000\057\000\057\000\057\000\000\000\
\000\000\057\000\057\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\057\000\000\000\
\000\000\057\000\057\000\000\000\000\000\000\000\000\000\000\000\
\057\000\000\000\057\000\057\000\057\000\057\000\057\000\057\000\
\057\000\057\000\057\000\057\000\000\000\055\000\000\000\000\000\
\057\000\000\000\057\000\057\000\057\000\057\000\057\000\057\000\
\057\000\057\000\057\000\057\000\057\000\057\000\058\000\058\000\
\058\000\058\000\058\000\000\000\000\000\058\000\058\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\058\000\000\000\000\000\058\000\058\000\053\000\
\000\000\000\000\000\000\000\000\058\000\000\000\058\000\058\000\
\058\000\058\000\058\000\058\000\058\000\058\000\058\000\058\000\
\000\000\000\000\000\000\000\000\058\000\000\000\058\000\058\000\
\058\000\058\000\058\000\058\000\058\000\058\000\058\000\058\000\
\058\000\058\000\059\000\059\000\059\000\059\000\059\000\000\000\
\000\000\059\000\059\000\054\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\059\000\000\000\
\000\000\059\000\059\000\000\000\000\000\000\000\000\000\000\000\
\059\000\000\000\059\000\059\000\059\000\059\000\059\000\059\000\
\059\000\059\000\059\000\059\000\000\000\000\000\000\000\000\000\
\059\000\000\000\059\000\059\000\059\000\059\000\059\000\059\000\
\059\000\059\000\059\000\059\000\059\000\059\000\060\000\060\000\
\060\000\060\000\060\000\000\000\000\000\060\000\060\000\048\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\060\000\000\000\000\000\060\000\060\000\000\000\
\000\000\000\000\000\000\000\000\060\000\000\000\060\000\060\000\
\060\000\060\000\060\000\060\000\060\000\060\000\060\000\060\000\
\000\000\000\000\000\000\000\000\060\000\000\000\060\000\060\000\
\060\000\060\000\060\000\060\000\060\000\060\000\060\000\060\000\
\060\000\060\000\061\000\061\000\061\000\061\000\061\000\000\000\
\000\000\061\000\061\000\049\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\061\000\000\000\
\000\000\061\000\061\000\000\000\000\000\000\000\000\000\000\000\
\061\000\000\000\061\000\061\000\061\000\061\000\061\000\061\000\
\061\000\061\000\061\000\061\000\000\000\000\000\000\000\000\000\
\061\000\000\000\061\000\061\000\061\000\061\000\061\000\061\000\
\061\000\061\000\061\000\061\000\061\000\061\000\055\000\055\000\
\055\000\055\000\055\000\000\000\000\000\055\000\055\000\050\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\055\000\000\000\000\000\055\000\055\000\000\000\
\000\000\000\000\000\000\000\000\055\000\000\000\055\000\055\000\
\055\000\055\000\055\000\055\000\055\000\055\000\055\000\055\000\
\053\000\053\000\053\000\053\000\053\000\000\000\000\000\053\000\
\053\000\051\000\000\000\000\000\055\000\055\000\055\000\055\000\
\055\000\055\000\000\000\000\000\053\000\000\000\000\000\053\000\
\053\000\000\000\000\000\000\000\000\000\000\000\053\000\000\000\
\053\000\053\000\053\000\053\000\053\000\053\000\053\000\053\000\
\053\000\053\000\000\000\000\000\054\000\054\000\054\000\054\000\
\054\000\052\000\000\000\054\000\054\000\000\000\053\000\053\000\
\053\000\053\000\053\000\053\000\000\000\000\000\000\000\000\000\
\054\000\000\000\000\000\054\000\054\000\000\000\000\000\000\000\
\000\000\041\000\054\000\000\000\054\000\054\000\054\000\054\000\
\054\000\054\000\054\000\054\000\054\000\054\000\000\000\000\000\
\000\000\000\000\000\000\009\000\010\000\011\000\051\000\013\000\
\000\000\034\000\054\000\054\000\054\000\054\000\054\000\054\000\
\048\000\048\000\048\000\048\000\048\000\000\000\000\000\048\000\
\000\000\079\000\015\000\146\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\048\000\000\000\000\000\048\000\
\000\000\020\000\000\000\000\000\000\000\000\000\048\000\000\000\
\048\000\048\000\048\000\000\000\048\000\000\000\048\000\000\000\
\079\000\079\000\000\000\079\000\079\000\079\000\079\000\079\000\
\000\000\079\000\079\000\079\000\079\000\079\000\079\000\000\000\
\000\000\000\000\000\000\048\000\049\000\049\000\049\000\049\000\
\049\000\000\000\000\000\049\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\049\000\000\000\000\000\049\000\000\000\000\000\000\000\000\000\
\000\000\000\000\049\000\000\000\049\000\049\000\049\000\000\000\
\049\000\000\000\049\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\013\000\013\000\013\000\013\000\013\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\049\000\
\050\000\050\000\050\000\050\000\050\000\000\000\000\000\050\000\
\000\000\013\000\013\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\050\000\000\000\000\000\050\000\
\013\000\000\000\000\000\000\000\000\000\000\000\050\000\000\000\
\050\000\050\000\050\000\000\000\050\000\000\000\050\000\000\000\
\000\000\000\000\051\000\051\000\051\000\051\000\051\000\000\000\
\000\000\051\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\050\000\000\000\000\000\051\000\000\000\
\000\000\051\000\000\000\000\000\000\000\000\000\000\000\000\000\
\051\000\000\000\051\000\051\000\051\000\000\000\051\000\000\000\
\051\000\000\000\052\000\052\000\052\000\052\000\052\000\000\000\
\000\000\052\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\051\000\052\000\000\000\
\000\000\052\000\041\000\041\000\041\000\041\000\041\000\000\000\
\052\000\041\000\052\000\052\000\052\000\000\000\052\000\000\000\
\052\000\000\000\000\000\000\000\000\000\000\000\041\000\000\000\
\000\000\041\000\034\000\034\000\034\000\034\000\034\000\000\000\
\041\000\000\000\041\000\041\000\041\000\052\000\041\000\000\000\
\041\000\000\000\000\000\000\000\000\000\000\000\034\000\000\000\
\000\000\034\000\000\000\000\000\000\000\000\000\000\000\000\000\
\034\000\000\000\034\000\000\000\034\000\041\000\034\000\000\000\
\034\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\079\000\079\000\079\000\
\079\000\079\000\079\000\079\000\079\000\034\000\079\000\079\000\
\079\000\079\000\079\000\079\000\079\000\079\000\079\000\079\000\
\079\000"

let yycheck = "\020\000\
\000\000\014\000\015\000\016\000\017\000\018\000\004\001\009\001\
\004\001\001\001\002\001\003\001\004\001\005\001\001\000\025\001\
\017\001\001\001\002\001\003\001\004\001\005\001\025\001\038\001\
\004\001\040\001\041\001\025\001\038\001\025\001\024\001\009\001\
\024\001\045\001\046\001\038\001\130\000\131\000\040\001\041\001\
\024\001\001\001\002\001\003\001\004\001\005\001\059\000\039\001\
\008\001\062\000\063\000\064\000\065\000\066\000\067\000\039\001\
\077\000\078\000\024\001\153\000\000\000\021\001\040\001\041\001\
\024\001\009\001\025\001\080\000\162\000\061\001\062\001\031\001\
\024\001\033\001\168\000\035\001\025\001\037\001\025\001\039\001\
\025\001\040\001\041\001\001\001\002\001\003\001\004\001\005\001\
\043\001\044\001\008\001\040\001\041\001\040\001\041\001\040\001\
\041\001\024\001\034\001\001\001\060\001\034\001\009\001\021\001\
\040\001\041\001\024\001\040\001\041\001\024\001\123\000\124\000\
\034\001\031\001\024\001\033\001\024\001\035\001\009\001\037\001\
\000\000\039\001\135\000\001\001\002\001\003\001\004\001\005\001\
\040\001\041\001\008\001\047\001\030\001\049\001\050\001\051\001\
\052\001\053\001\054\001\007\001\036\001\007\001\060\001\021\001\
\040\001\041\001\024\001\001\001\002\001\003\001\004\001\005\001\
\034\001\031\001\008\001\033\001\001\001\035\001\009\001\037\001\
\009\001\039\001\060\000\061\000\075\000\076\000\038\001\021\001\
\062\001\034\001\024\001\001\001\002\001\003\001\004\001\005\001\
\007\001\031\001\008\001\033\001\000\000\035\001\060\001\037\001\
\001\001\039\001\009\001\009\001\032\001\009\001\009\001\021\001\
\025\001\007\001\024\001\001\001\002\001\003\001\004\001\005\001\
\034\001\031\001\009\001\033\001\007\001\035\001\060\001\037\001\
\000\000\039\001\127\000\085\000\122\000\255\255\255\255\021\001\
\255\255\255\255\024\001\040\001\041\001\042\001\255\255\255\255\
\255\255\031\001\255\255\033\001\255\255\035\001\060\001\037\001\
\255\255\039\001\055\001\056\001\057\001\058\001\059\001\255\255\
\000\000\255\255\255\255\255\255\255\255\001\001\002\001\003\001\
\004\001\005\001\255\255\255\255\255\255\255\255\060\001\255\255\
\255\255\001\001\002\001\003\001\004\001\005\001\255\255\255\255\
\008\001\009\001\255\255\255\255\024\001\025\001\068\000\069\000\
\070\000\071\000\072\000\073\000\074\000\021\001\255\255\255\255\
\024\001\025\001\255\255\039\001\255\255\255\255\255\255\031\001\
\255\255\033\001\034\001\035\001\036\001\037\001\038\001\039\001\
\040\001\041\001\042\001\043\001\044\001\000\000\255\255\047\001\
\255\255\049\001\050\001\051\001\052\001\053\001\054\001\055\001\
\056\001\057\001\058\001\059\001\060\001\001\001\002\001\003\001\
\004\001\005\001\255\255\255\255\008\001\009\001\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\021\001\255\255\255\255\024\001\025\001\255\255\255\255\
\255\255\255\255\255\255\031\001\255\255\033\001\034\001\035\001\
\036\001\037\001\038\001\039\001\040\001\041\001\042\001\043\001\
\044\001\000\000\255\255\047\001\255\255\049\001\050\001\051\001\
\052\001\053\001\054\001\055\001\056\001\057\001\058\001\059\001\
\060\001\001\001\002\001\003\001\004\001\005\001\255\255\255\255\
\008\001\009\001\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\021\001\255\255\255\255\
\024\001\025\001\255\255\255\255\255\255\255\255\255\255\031\001\
\255\255\033\001\034\001\035\001\036\001\037\001\038\001\039\001\
\040\001\041\001\042\001\043\001\044\001\000\000\255\255\047\001\
\255\255\049\001\050\001\051\001\052\001\053\001\054\001\055\001\
\056\001\057\001\058\001\059\001\060\001\001\001\002\001\003\001\
\004\001\005\001\255\255\255\255\008\001\009\001\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\021\001\255\255\255\255\024\001\025\001\255\255\255\255\
\255\255\255\255\255\255\031\001\255\255\033\001\034\001\035\001\
\036\001\037\001\038\001\039\001\040\001\041\001\042\001\255\255\
\255\255\000\000\255\255\047\001\255\255\049\001\050\001\051\001\
\052\001\053\001\054\001\055\001\056\001\057\001\058\001\059\001\
\060\001\001\001\002\001\003\001\004\001\005\001\255\255\255\255\
\008\001\009\001\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\021\001\255\255\255\255\
\024\001\025\001\255\255\255\255\255\255\255\255\255\255\031\001\
\255\255\033\001\034\001\035\001\036\001\037\001\038\001\039\001\
\040\001\041\001\042\001\255\255\255\255\000\000\255\255\047\001\
\255\255\049\001\050\001\051\001\052\001\053\001\054\001\055\001\
\056\001\057\001\058\001\059\001\060\001\255\255\001\001\002\001\
\003\001\004\001\005\001\255\255\255\255\008\001\009\001\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\021\001\255\255\255\255\024\001\025\001\255\255\
\255\255\255\255\255\255\255\255\031\001\255\255\033\001\034\001\
\035\001\036\001\037\001\038\001\039\001\040\001\041\001\042\001\
\255\255\000\000\255\255\255\255\047\001\255\255\049\001\050\001\
\051\001\052\001\053\001\054\001\055\001\056\001\057\001\058\001\
\059\001\060\001\001\001\002\001\003\001\004\001\005\001\255\255\
\255\255\008\001\009\001\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\021\001\255\255\
\255\255\024\001\025\001\255\255\255\255\255\255\255\255\255\255\
\031\001\255\255\033\001\034\001\035\001\036\001\037\001\038\001\
\039\001\040\001\041\001\042\001\255\255\000\000\255\255\255\255\
\047\001\255\255\049\001\050\001\051\001\052\001\053\001\054\001\
\055\001\056\001\057\001\058\001\059\001\060\001\001\001\002\001\
\003\001\004\001\005\001\255\255\255\255\008\001\009\001\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\021\001\255\255\255\255\024\001\025\001\000\000\
\255\255\255\255\255\255\255\255\031\001\255\255\033\001\034\001\
\035\001\036\001\037\001\038\001\039\001\040\001\041\001\042\001\
\255\255\255\255\255\255\255\255\047\001\255\255\049\001\050\001\
\051\001\052\001\053\001\054\001\055\001\056\001\057\001\058\001\
\059\001\060\001\001\001\002\001\003\001\004\001\005\001\255\255\
\255\255\008\001\009\001\000\000\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\021\001\255\255\
\255\255\024\001\025\001\255\255\255\255\255\255\255\255\255\255\
\031\001\255\255\033\001\034\001\035\001\036\001\037\001\038\001\
\039\001\040\001\041\001\042\001\255\255\255\255\255\255\255\255\
\047\001\255\255\049\001\050\001\051\001\052\001\053\001\054\001\
\055\001\056\001\057\001\058\001\059\001\060\001\001\001\002\001\
\003\001\004\001\005\001\255\255\255\255\008\001\009\001\000\000\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\021\001\255\255\255\255\024\001\025\001\255\255\
\255\255\255\255\255\255\255\255\031\001\255\255\033\001\034\001\
\035\001\036\001\037\001\038\001\039\001\040\001\041\001\042\001\
\255\255\255\255\255\255\255\255\047\001\255\255\049\001\050\001\
\051\001\052\001\053\001\054\001\055\001\056\001\057\001\058\001\
\059\001\060\001\001\001\002\001\003\001\004\001\005\001\255\255\
\255\255\008\001\009\001\000\000\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\021\001\255\255\
\255\255\024\001\025\001\255\255\255\255\255\255\255\255\255\255\
\031\001\255\255\033\001\034\001\035\001\036\001\037\001\038\001\
\039\001\040\001\041\001\042\001\255\255\255\255\255\255\255\255\
\047\001\255\255\049\001\050\001\051\001\052\001\053\001\054\001\
\055\001\056\001\057\001\058\001\059\001\060\001\001\001\002\001\
\003\001\004\001\005\001\255\255\255\255\008\001\009\001\000\000\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\021\001\255\255\255\255\024\001\025\001\255\255\
\255\255\255\255\255\255\255\255\031\001\255\255\033\001\034\001\
\035\001\036\001\037\001\038\001\039\001\040\001\041\001\042\001\
\001\001\002\001\003\001\004\001\005\001\255\255\255\255\008\001\
\009\001\000\000\255\255\255\255\055\001\056\001\057\001\058\001\
\059\001\060\001\255\255\255\255\021\001\255\255\255\255\024\001\
\025\001\255\255\255\255\255\255\255\255\255\255\031\001\255\255\
\033\001\034\001\035\001\036\001\037\001\038\001\039\001\040\001\
\041\001\042\001\255\255\255\255\001\001\002\001\003\001\004\001\
\005\001\000\000\255\255\008\001\009\001\255\255\055\001\056\001\
\057\001\058\001\059\001\060\001\255\255\255\255\255\255\255\255\
\021\001\255\255\255\255\024\001\025\001\255\255\255\255\255\255\
\255\255\000\000\031\001\255\255\033\001\034\001\035\001\036\001\
\037\001\038\001\039\001\040\001\041\001\042\001\255\255\255\255\
\255\255\255\255\255\255\001\001\002\001\003\001\004\001\005\001\
\255\255\000\000\055\001\056\001\057\001\058\001\059\001\060\001\
\001\001\002\001\003\001\004\001\005\001\255\255\255\255\008\001\
\255\255\009\001\024\001\025\001\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\021\001\255\255\255\255\024\001\
\255\255\039\001\255\255\255\255\255\255\255\255\031\001\255\255\
\033\001\034\001\035\001\255\255\037\001\255\255\039\001\255\255\
\040\001\041\001\255\255\043\001\044\001\045\001\046\001\047\001\
\255\255\049\001\050\001\051\001\052\001\053\001\054\001\255\255\
\255\255\255\255\255\255\060\001\001\001\002\001\003\001\004\001\
\005\001\255\255\255\255\008\001\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\021\001\255\255\255\255\024\001\255\255\255\255\255\255\255\255\
\255\255\255\255\031\001\255\255\033\001\034\001\035\001\255\255\
\037\001\255\255\039\001\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\001\001\002\001\003\001\004\001\005\001\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\060\001\
\001\001\002\001\003\001\004\001\005\001\255\255\255\255\008\001\
\255\255\024\001\025\001\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\021\001\255\255\255\255\024\001\
\039\001\255\255\255\255\255\255\255\255\255\255\031\001\255\255\
\033\001\034\001\035\001\255\255\037\001\255\255\039\001\255\255\
\255\255\255\255\001\001\002\001\003\001\004\001\005\001\255\255\
\255\255\008\001\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\060\001\255\255\255\255\021\001\255\255\
\255\255\024\001\255\255\255\255\255\255\255\255\255\255\255\255\
\031\001\255\255\033\001\034\001\035\001\255\255\037\001\255\255\
\039\001\255\255\001\001\002\001\003\001\004\001\005\001\255\255\
\255\255\008\001\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\060\001\021\001\255\255\
\255\255\024\001\001\001\002\001\003\001\004\001\005\001\255\255\
\031\001\008\001\033\001\034\001\035\001\255\255\037\001\255\255\
\039\001\255\255\255\255\255\255\255\255\255\255\021\001\255\255\
\255\255\024\001\001\001\002\001\003\001\004\001\005\001\255\255\
\031\001\255\255\033\001\034\001\035\001\060\001\037\001\255\255\
\039\001\255\255\255\255\255\255\255\255\255\255\021\001\255\255\
\255\255\024\001\255\255\255\255\255\255\255\255\255\255\255\255\
\031\001\255\255\033\001\255\255\035\001\060\001\037\001\255\255\
\039\001\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\040\001\041\001\042\001\
\043\001\044\001\045\001\046\001\047\001\060\001\049\001\050\001\
\051\001\052\001\053\001\054\001\055\001\056\001\057\001\058\001\
\059\001"

let yynames_const = "\
  INDENTA\000\
  DEDENTA\000\
  NOVALINHA\000\
  TIPOINT\000\
  TIPOFLOAT\000\
  TIPOSTRING\000\
  TIPOVOID\000\
  TIPOBOOL\000\
  PTO\000\
  PTVIRG\000\
  DEF\000\
  IS\000\
  YIELD\000\
  FROM\000\
  RETURN\000\
  TRUE\000\
  FALSE\000\
  APAR\000\
  FPAR\000\
  ACOL\000\
  FCOL\000\
  ACHA\000\
  FCHA\000\
  SETA\000\
  IF\000\
  ELSE\000\
  WHILE\000\
  DPONTOS\000\
  FOR\000\
  IN\000\
  RANGE\000\
  VIRG\000\
  NOT\000\
  AND\000\
  OR\000\
  ATRIB\000\
  MAIS\000\
  MENOS\000\
  VEZES\000\
  DIVIDIDO\000\
  MODULO\000\
  POT\000\
  MAIOR\000\
  MENOR\000\
  IGUAL\000\
  DIFERENTE\000\
  MAIORIGUAL\000\
  MENORIGUAL\000\
  ATRIBMAIS\000\
  ATRIBMENOS\000\
  ATRIBVEZES\000\
  ATRIBDIV\000\
  ATRIBMOD\000\
  EOF\000\
  PRINT\000\
  INPUT\000\
  INT_PARSE\000\
  "

let yynames_block = "\
  INT\000\
  FLOAT\000\
  BOOL\000\
  ID\000\
  STRING\000\
  LINHA\000\
  "

let yyact = [|
  (fun _ -> failwith "parser")
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'funcoes) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'comandos) in
    Obj.repr(
# 67 "sintatico.mly"
                           ( cria_programa _1 _2 )
# 712 "sintatico.ml"
               : Asa.programa))
; (fun __caml_parser_env ->
    Obj.repr(
# 70 "sintatico.mly"
          ( [] )
# 718 "sintatico.ml"
               : 'funcoes))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'funcoes) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'funcao) in
    Obj.repr(
# 71 "sintatico.mly"
                                 ( _1 @ [ _2 ] )
# 726 "sintatico.ml"
               : 'funcoes))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 10 : string) in
    let _4 = (Parsing.peek_val __caml_parser_env 8 : 'parametros) in
    let _7 = (Parsing.peek_val __caml_parser_env 5 : 'tipo) in
    let _11 = (Parsing.peek_val __caml_parser_env 1 : 'comandos) in
    Obj.repr(
# 76 "sintatico.mly"
( cria_funcao 1 _2 _4 _7 _11 )
# 736 "sintatico.ml"
               : 'funcao))
; (fun __caml_parser_env ->
    Obj.repr(
# 79 "sintatico.mly"
                  (Some TInt)
# 742 "sintatico.ml"
               : 'tipo))
; (fun __caml_parser_env ->
    Obj.repr(
# 82 "sintatico.mly"
            ( [] )
# 748 "sintatico.ml"
               : 'parametros))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'parametros) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'parametro) in
    Obj.repr(
# 83 "sintatico.mly"
                                            ( _1 @ [ _2 ] )
# 756 "sintatico.ml"
               : 'parametros))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'tipo) in
    Obj.repr(
# 86 "sintatico.mly"
                                 ( cria_parametro 1 _1 _3 )
# 764 "sintatico.ml"
               : 'parametro))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'tipo) in
    Obj.repr(
# 87 "sintatico.mly"
                                    ( cria_parametro 1 _1 _3 )
# 772 "sintatico.ml"
               : 'parametro))
; (fun __caml_parser_env ->
    Obj.repr(
# 89 "sintatico.mly"
            ( [] )
# 778 "sintatico.ml"
               : 'argumentos))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'argumentos) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'argumento) in
    Obj.repr(
# 90 "sintatico.mly"
                                           ( _1 @ [ _2 ] )
# 786 "sintatico.ml"
               : 'argumentos))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'expressao) in
    Obj.repr(
# 93 "sintatico.mly"
                          ( cria_exp 2 _1.valor)
# 793 "sintatico.ml"
               : 'argumento))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'expressao) in
    Obj.repr(
# 94 "sintatico.mly"
                                ( cria_exp 2 _1.valor)
# 800 "sintatico.ml"
               : 'argumento))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 4 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 2 : 'argumentos) in
    Obj.repr(
# 97 "sintatico.mly"
                                                    ( cria_cmd 1 (ChamaFuncaoVoid (_1, _3)))
# 808 "sintatico.ml"
               : 'cmd_chamada_func))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 6 : 'expressao) in
    let _3 = (Parsing.peek_val __caml_parser_env 4 : string) in
    let _5 = (Parsing.peek_val __caml_parser_env 2 : 'argumentos) in
    Obj.repr(
# 98 "sintatico.mly"
                                                                                    (cria_cmd 1 (ChamaFuncaoAtrib (_1, _3, _5)))
# 817 "sintatico.ml"
               : 'cmd_chamada_func))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'cmd_atrib) in
    Obj.repr(
# 101 "sintatico.mly"
                    ( _1 )
# 824 "sintatico.ml"
               : 'comando))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'cmd_if_else) in
    Obj.repr(
# 102 "sintatico.mly"
                              ( _1 )
# 831 "sintatico.ml"
               : 'comando))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'cmd_if) in
    Obj.repr(
# 103 "sintatico.mly"
                         ( _1 )
# 838 "sintatico.ml"
               : 'comando))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'cmd_while) in
    Obj.repr(
# 104 "sintatico.mly"
                            ( _1 )
# 845 "sintatico.ml"
               : 'comando))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'cmd_for) in
    Obj.repr(
# 105 "sintatico.mly"
                          ( _1 )
# 852 "sintatico.ml"
               : 'comando))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'cmd_range1) in
    Obj.repr(
# 106 "sintatico.mly"
                             ( _1 )
# 859 "sintatico.ml"
               : 'comando))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'cmd_range2) in
    Obj.repr(
# 107 "sintatico.mly"
                             ( _1 )
# 866 "sintatico.ml"
               : 'comando))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'cmd_range3) in
    Obj.repr(
# 108 "sintatico.mly"
                             ( _1 )
# 873 "sintatico.ml"
               : 'comando))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'cmd_atribMAIS) in
    Obj.repr(
# 109 "sintatico.mly"
                                ( _1 )
# 880 "sintatico.ml"
               : 'comando))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'cmd_atribMENOS) in
    Obj.repr(
# 110 "sintatico.mly"
                                 ( _1 )
# 887 "sintatico.ml"
               : 'comando))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'cmd_atribVEZES) in
    Obj.repr(
# 111 "sintatico.mly"
                                 ( _1 )
# 894 "sintatico.ml"
               : 'comando))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'cmd_atribDIV) in
    Obj.repr(
# 112 "sintatico.mly"
                               ( _1 )
# 901 "sintatico.ml"
               : 'comando))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'cmd_atribMOD) in
    Obj.repr(
# 113 "sintatico.mly"
                               ( _1 )
# 908 "sintatico.ml"
               : 'comando))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'cmd_chamada_func) in
    Obj.repr(
# 114 "sintatico.mly"
                                   ( _1 )
# 915 "sintatico.ml"
               : 'comando))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'cmd_retorno) in
    Obj.repr(
# 115 "sintatico.mly"
                              ( _1 )
# 922 "sintatico.ml"
               : 'comando))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'cmd_print) in
    Obj.repr(
# 116 "sintatico.mly"
                            ( _1 )
# 929 "sintatico.ml"
               : 'comando))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'cmd_input) in
    Obj.repr(
# 117 "sintatico.mly"
                            ( _1 )
# 936 "sintatico.ml"
               : 'comando))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'cmd_int_parse) in
    Obj.repr(
# 118 "sintatico.mly"
                                ( _1 )
# 943 "sintatico.ml"
               : 'comando))
; (fun __caml_parser_env ->
    Obj.repr(
# 121 "sintatico.mly"
          ( [] )
# 949 "sintatico.ml"
               : 'comandos))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'comandos) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'comando) in
    Obj.repr(
# 122 "sintatico.mly"
                                   ( _1 @ [ _2 ] )
# 957 "sintatico.ml"
               : 'comandos))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 6 : 'expressao) in
    let _5 = (Parsing.peek_val __caml_parser_env 2 : 'expressao) in
    Obj.repr(
# 125 "sintatico.mly"
    ( cria_cmd 1 ( CmdIntParse ( _1, _5 )))
# 965 "sintatico.ml"
               : 'cmd_int_parse))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 2 : 'expressao) in
    Obj.repr(
# 127 "sintatico.mly"
    ( cria_cmd 1 ( CmdPrint( _3 ) ))
# 972 "sintatico.ml"
               : 'cmd_print))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 6 : 'expressao) in
    let _5 = (Parsing.peek_val __caml_parser_env 2 : 'expressao) in
    Obj.repr(
# 129 "sintatico.mly"
    ( cria_cmd 1 ( CmdInput ( _1, _5 ) ))
# 980 "sintatico.ml"
               : 'cmd_input))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'expressao) in
    Obj.repr(
# 131 "sintatico.mly"
    ( cria_cmd 1 ( CmdReturn ( _2 ) ) )
# 987 "sintatico.ml"
               : 'cmd_retorno))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : 'expressao) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'expressao) in
    Obj.repr(
# 133 "sintatico.mly"
    ( cria_cmd 2 ( CmdAtrib ( _1, _3 ) ) )
# 995 "sintatico.ml"
               : 'cmd_atrib))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 5 : 'expressao) in
    let _6 = (Parsing.peek_val __caml_parser_env 1 : 'comandos) in
    Obj.repr(
# 135 "sintatico.mly"
    ( cria_cmd 1 ( CmdIf ( _2, _6, None ) ) )
# 1003 "sintatico.ml"
               : 'cmd_if))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 11 : 'expressao) in
    let _6 = (Parsing.peek_val __caml_parser_env 7 : 'comandos) in
    let _12 = (Parsing.peek_val __caml_parser_env 1 : 'comandos) in
    Obj.repr(
# 138 "sintatico.mly"
    ( cria_cmd 1 ( CmdIf ( _2, _6, Some( _12 ) ) ) )
# 1012 "sintatico.ml"
               : 'cmd_if_else))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 5 : 'expressao) in
    let _6 = (Parsing.peek_val __caml_parser_env 1 : 'comandos) in
    Obj.repr(
# 140 "sintatico.mly"
    ( cria_cmd 1 ( CmdWhile ( _2, _6 ) ) )
# 1020 "sintatico.ml"
               : 'cmd_while))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 7 : 'expressao) in
    let _4 = (Parsing.peek_val __caml_parser_env 5 : 'comando) in
    let _8 = (Parsing.peek_val __caml_parser_env 1 : 'comandos) in
    Obj.repr(
# 142 "sintatico.mly"
    ( cria_cmd 1 ( CmdFor ( _2, _4, _8 ) ) )
# 1029 "sintatico.ml"
               : 'cmd_for))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 1 : int) in
    Obj.repr(
# 146 "sintatico.mly"
    ( cria_cmd 1 ( CmdRange ( 0, _3, 1 ) ) )
# 1036 "sintatico.ml"
               : 'cmd_range1))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 3 : int) in
    let _5 = (Parsing.peek_val __caml_parser_env 1 : int) in
    Obj.repr(
# 150 "sintatico.mly"
    ( cria_cmd 1 ( CmdRange ( _3, _5, 1) ) )
# 1044 "sintatico.ml"
               : 'cmd_range2))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 5 : int) in
    let _5 = (Parsing.peek_val __caml_parser_env 3 : int) in
    let _7 = (Parsing.peek_val __caml_parser_env 1 : int) in
    Obj.repr(
# 153 "sintatico.mly"
    ( cria_cmd 1 ( CmdRange ( _3, _5, _7 ) ) )
# 1053 "sintatico.ml"
               : 'cmd_range3))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expressao) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expressao) in
    Obj.repr(
# 156 "sintatico.mly"
    ( let exp = cria_exp 2 (Some( ExpBin(Mais, _1, _3 ) )) in
        cria_cmd 2 ( CmdAtrib( _1, exp ) ) )
# 1062 "sintatico.ml"
               : 'cmd_atribMAIS))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expressao) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expressao) in
    Obj.repr(
# 159 "sintatico.mly"
    ( let exp = cria_exp 2 (Some (ExpBin ( Menos, _1, _3 ) ) )in
    cria_cmd 2 ( CmdAtrib ( _1, exp ) ) )
# 1071 "sintatico.ml"
               : 'cmd_atribMENOS))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expressao) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expressao) in
    Obj.repr(
# 162 "sintatico.mly"
    ( let exp = cria_exp 2 (Some( ExpBin ( Mult, _1, _3 ) )) in
    cria_cmd 2 ( CmdAtrib ( _1, exp ) ) )
# 1080 "sintatico.ml"
               : 'cmd_atribVEZES))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expressao) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expressao) in
    Obj.repr(
# 165 "sintatico.mly"
    ( let exp = cria_exp 2 (Some( ExpBin ( Div, _1, _3 ) )) in
    cria_cmd 2 ( CmdAtrib( _1, exp ) ) )
# 1089 "sintatico.ml"
               : 'cmd_atribDIV))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expressao) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expressao) in
    Obj.repr(
# 168 "sintatico.mly"
    ( let exp = cria_exp 2 (Some( ExpBin ( Modulo, _1, _3 ) )) in
    cria_cmd 2 ( CmdAtrib( _1, exp ) ) )
# 1098 "sintatico.ml"
               : 'cmd_atribMOD))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expressao) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr1) in
    Obj.repr(
# 172 "sintatico.mly"
                                (cria_exp 5 (Some(ExpBin (And, _1, _3))))
# 1106 "sintatico.ml"
               : 'expressao))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expressao) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr1) in
    Obj.repr(
# 173 "sintatico.mly"
                       (cria_exp 5 (Some(ExpBin (Or, _1, _3))))
# 1114 "sintatico.ml"
               : 'expressao))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'expr1) in
    Obj.repr(
# 174 "sintatico.mly"
           (_1)
# 1121 "sintatico.ml"
               : 'expressao))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr1) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr2) in
    Obj.repr(
# 177 "sintatico.mly"
                          ( cria_exp 4 (Some( ExpBin ( Maior, _1, _3 ) )) )
# 1129 "sintatico.ml"
               : 'expr1))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr1) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr2) in
    Obj.repr(
# 178 "sintatico.mly"
                      ( cria_exp 4 (Some( ExpBin ( Menor, _1, _3 ) )) )
# 1137 "sintatico.ml"
               : 'expr1))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr1) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr2) in
    Obj.repr(
# 179 "sintatico.mly"
                      ( cria_exp 4 (Some( ExpBin ( Igual, _1, _3 ) )) )
# 1145 "sintatico.ml"
               : 'expr1))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr1) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr2) in
    Obj.repr(
# 180 "sintatico.mly"
                          ( cria_exp 4 (Some( ExpBin ( Diferente, _1, _3 ) )) )
# 1153 "sintatico.ml"
               : 'expr1))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr1) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr2) in
    Obj.repr(
# 181 "sintatico.mly"
                           ( cria_exp 4 (Some( ExpBin ( MaiorIgual, _1, _3 ) )) )
# 1161 "sintatico.ml"
               : 'expr1))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr1) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr2) in
    Obj.repr(
# 182 "sintatico.mly"
                           ( cria_exp 4 (Some( ExpBin ( MenorIgual, _1, _3 ) )) )
# 1169 "sintatico.ml"
               : 'expr1))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr1) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr2) in
    Obj.repr(
# 183 "sintatico.mly"
                       ( cria_exp 4 (Some( ExpBin ( Modulo, _1, _3 ) )) )
# 1177 "sintatico.ml"
               : 'expr1))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'expr2) in
    Obj.repr(
# 184 "sintatico.mly"
          ( _1 )
# 1184 "sintatico.ml"
               : 'expr1))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr2) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr3) in
    Obj.repr(
# 186 "sintatico.mly"
                         ( cria_exp 3 (Some( ExpBin ( Mais, _1, _3 ) )) )
# 1192 "sintatico.ml"
               : 'expr2))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr2) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr3) in
    Obj.repr(
# 187 "sintatico.mly"
                        ( cria_exp 3 (Some( ExpBin ( Menos, _1, _3 ) )) )
# 1200 "sintatico.ml"
               : 'expr2))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'expr3) in
    Obj.repr(
# 188 "sintatico.mly"
            ( _1 )
# 1207 "sintatico.ml"
               : 'expr2))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr3) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr4) in
    Obj.repr(
# 191 "sintatico.mly"
                         ( cria_exp 2 (Some( ExpBin ( Mult, _1, _3 ) )) )
# 1215 "sintatico.ml"
               : 'expr3))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr3) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr4) in
    Obj.repr(
# 192 "sintatico.mly"
                          ( cria_exp 2 (Some( ExpBin ( Div, _1, _3 ) )) )
# 1223 "sintatico.ml"
               : 'expr3))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'expr4) in
    Obj.repr(
# 193 "sintatico.mly"
          ( _1 )
# 1230 "sintatico.ml"
               : 'expr3))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'expr4) in
    Obj.repr(
# 196 "sintatico.mly"
                 (cria_exp 1 (Some(ExpUn(Not, _2))))
# 1237 "sintatico.ml"
               : 'expr4))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'expr5) in
    Obj.repr(
# 197 "sintatico.mly"
          (_1)
# 1244 "sintatico.ml"
               : 'expr4))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'operando) in
    Obj.repr(
# 200 "sintatico.mly"
                 ( cria_exp 0 _1 )
# 1251 "sintatico.ml"
               : 'expr5))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'variavel) in
    Obj.repr(
# 201 "sintatico.mly"
                 ( cria_exp 0 (Some( ExpVar _1 ) ))
# 1258 "sintatico.ml"
               : 'expr5))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'expressao) in
    Obj.repr(
# 202 "sintatico.mly"
                           ( _2 )
# 1265 "sintatico.ml"
               : 'expr5))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : int) in
    Obj.repr(
# 205 "sintatico.mly"
              (Some (ExpInt _1) )
# 1272 "sintatico.ml"
               : 'operando))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : float) in
    Obj.repr(
# 206 "sintatico.mly"
            ( Some (ExpFloat _1) )
# 1279 "sintatico.ml"
               : 'operando))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 207 "sintatico.mly"
             ( Some (ExpString _1) )
# 1286 "sintatico.ml"
               : 'operando))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : bool) in
    Obj.repr(
# 208 "sintatico.mly"
            ( Some (ExpBool _1) )
# 1293 "sintatico.ml"
               : 'operando))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 210 "sintatico.mly"
             ( VarSimples _1 )
# 1300 "sintatico.ml"
               : 'variavel))
(* Entry programa *)
; (fun __caml_parser_env -> raise (Parsing.YYexit (Parsing.peek_val __caml_parser_env 0)))
|]
let yytables =
  { Parsing.actions=yyact;
    Parsing.transl_const=yytransl_const;
    Parsing.transl_block=yytransl_block;
    Parsing.lhs=yylhs;
    Parsing.len=yylen;
    Parsing.defred=yydefred;
    Parsing.dgoto=yydgoto;
    Parsing.sindex=yysindex;
    Parsing.rindex=yyrindex;
    Parsing.gindex=yygindex;
    Parsing.tablesize=yytablesize;
    Parsing.table=yytable;
    Parsing.check=yycheck;
    Parsing.error_function=parse_error;
    Parsing.names_const=yynames_const;
    Parsing.names_block=yynames_block }
let programa (lexfun : Lexing.lexbuf -> token) (lexbuf : Lexing.lexbuf) =
   (Parsing.yyparse yytables 1 lexfun lexbuf : Asa.programa)
